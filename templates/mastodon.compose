version: '3.5'
services:
  # Databases
  db:
    container_name: "mastodonDb"
    restart: always
    image: postgres:14-alpine
    shm_size: 256mb
    networks:
      - internal
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD
  redis:
    restart: always
    container_name: "mastodonRedis"
    image: redis:7-alpine
    networks:
      - internal
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - redis:/data
  es:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
    container_name: "mastodonEs"
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true"
      - "xpack.license.self_generated.type=basic"
      - "xpack.security.enabled=false"
      - "xpack.watcher.enabled=false"
      - "xpack.graph.enabled=false"
      - "xpack.ml.enabled=false"
      - "bootstrap.memory_lock=true"
      - "cluster.name=es-mastodon"
      - "discovery.type=single-node"
      - "thread_pool.write.queue_size=1000"
    networks:
       - internal
    healthcheck:
       test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
    volumes:
       - elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65565
        hard: 65565

  web:
    image: tootsuite/mastodon:v3.5.3
    container_name: "mastodonWeb"
    restart: always
    environment:
      - LOCAL_DOMAIN
      - SINGLE_USER_MODE
      - SECRET_KEY_BASE
      - OTP_SECRET
      - VAPID_PRIVATE_KEY
      - VAPID_PUBLIC_KEY
      - DB_HOST
      - DB_PORT
      - DB_NAME
      - DB_USER
      - DB_PASS
      - REDIS_HOST
      - REDIS_PORT
      - REDIS_PASSWORD
      - ES_ENABLED
      - ES_HOST
      - ES_PORT
      - S3_ENABLED
      - S3_PROTOCOL
      - S3_HOSTNAME
      - S3_BUCKET
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - S3_ALIAS_HOST
      - SMTP_SERVER
      - SMTP_PORT
      - SMTP_PASSWORD
      - SMTP_LOGIN
      - SMTP_AUTH_METHOD
      - SMTP_OPENSSL_VERIFY_MODE
      - SMTP_FROM_ADDRESS
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    networks:
      - external
      - internal
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mastodon.rule=Host(\`${MASTODON_SUBDOMAIN}${DOMAIN}\`)"
      - "traefik.http.routers.mastodon.tls=true"
      - "traefik.http.routers.mastodon.service=mastodon"
      - "traefik.http.services.mastodon.loadbalancer.server.port=3000"
      - "traefik.http.routers.webfinger.rule=Host(\`${DOMAIN}\`) && PathPrefix(\`/.well-known/webfinger\`)"
      - "traefik.http.routers.webfinger.middlewares=webfinger-redirect"
      - "traefik.http.routers.webfinger.tls=true"
      - "traefik.http.routers.webfinger.tls.certresolver=le"
      - "traefik.http.routers.webfinger.service=noop@internal"
      - "traefik.http.middlewares.webfinger-redirect.redirectregex.regex=^(.+?)pid1.sh(.+?)@pid1.sh$$"
      - "traefik.http.middlewares.webfinger-redirect.redirectregex.replacement=$${1}m.pid1.sh$${2}@m.pid1.sh"
    depends_on:
      - db
      - redis
      - minio
      - es
    volumes:
      - system:/mastodon/public/system

  streaming:
    image: tootsuite/mastodon:v3.5.3
    container_name: "mastodonStreaming"
    restart: always
    environment:
      - DB_USER
      - DB_PASS
      - DB_NAME
      - DB_HOST
      - DB_PORT
      - REDIS_HOST
      - REDIST_PORT
      - REDIS_PASSWORD
    command: node ./streaming
    networks:
      - external
      - internal
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.streaming.rule=Host(\`m.${DOMAIN}\`) && Path(\`/api/v1/streaming/{path:.*}\`)"
      - "traefik.http.routers.streaming.tls=true"
      - "traefik.http.routers.streaming.service=streaming"
      - "traefik.http.services.streaming.loadbalancer.server.port=4000"
    depends_on:
      - db
      - redis
      - minio

  sidekiq:
    image: tootsuite/mastodon:v3.5.3
    container_name: "mastodonSidekiq"
    restart: always
    environment:
      - DB_USER
      - DB_PASS
      - DB_NAME
      - DB_HOST
      - DB_PORT
      - REDIS_HOST
      - REDIS_PORT
      - REDIS_PASSWORD
      - SECRET_KEY_BASE
      - OTP_SECRET
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    networks:
      - external
      - internal
    volumes:
      - system:/mastodon/public/system
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]

  minio:
    image: minio/minio:RELEASE.2022-11-08T05-27-07Z
    container_name: "mastodonMinio"
    restart: always
    environment:
      - MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD
      - MINIO_VOLUMES
      - MINIO_BROWSER_REDIRECT
    command: minio server --console-address ":9090"
    networks:
      - external
      - internal
    healthcheck:
          test: [ 'CMD-SHELL', "curl localhost:9000/minio/health/live || exit 1" ]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.files.rule=Host(\`${FILES_SUBDOMAIN}${DOMAIN}\`)"
      - "traefik.http.routers.files.tls=true"
      - "traefik.http.routers.files.service=files"
      - "traefik.http.services.files.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio.rule=Host(\`minio.${DOMAIN}\`)"
      - "traefik.http.routers.minio.tls=true"
      - "traefik.http.routers.minio.service=minio"
      - "traefik.http.services.minio.loadbalancer.server.port=9090"
    volumes:
      - minio:/data
    ulimits:
      nofile:
        soft: 65565
        hard: 65565

volumes:
  system:
    name: mastodonSysVol
  postgres:
    name: mastodonDbVol
  redis:
    name: mastodonRedisVol
  elasticsearch:
    name: mastodonEsVol
  minio:
    name: mastodonFileVol

networks:
  external:
    external: true
  internal:
    name: mastodonInternalNet
